basePath: /api/v1
definitions:
  handler.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  handler.SubmitScoreRequest:
    properties:
      beatmap_id:
        type: string
      good_fast:
        type: integer
      good_late:
        type: integer
      input:
        type: integer
      max_combo:
        type: integer
      miss:
        type: integer
      perfect_critical_fast:
        type: integer
      perfect_critical_late:
        type: integer
      perfect_fast:
        type: integer
      perfect_late:
        type: integer
      score:
        type: integer
      user_id:
        type: string
    type: object
  handler.UpsertChartRequest:
    properties:
      beatmap_id:
        type: string
      difficulty:
        type: integer
      parallel_string:
        type: string
      song_name:
        type: string
    type: object
  handler.updateUserNameRequest:
    properties:
      user_id:
        type: string
      user_name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: https://github.com/pikachu0310/go-backend-template
  description: バックエンドテンプレートのAPI仕様書です。
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go Backend Template API
  version: "1.0"
paths:
  /charts:
    post:
      consumes:
      - application/json
      parameters:
      - description: 譜面情報
        in: body
        name: chart
        required: true
        schema:
          $ref: '#/definitions/handler.UpsertChartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: 譜面登録/更新
      tags:
      - charts
  /charts/ranking:
    get:
      description: beatmap_idを指定したランキング、未指定時は全譜面のランキング
      parameters:
      - description: 譜面ID
        in: query
        name: beatmap_id
        type: string
      - description: ランキング上限
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: 譜面ランキング
      tags:
      - charts
  /ping:
    get:
      consumes:
      - application/json
      description: サーバーの死活確認用エンドポイント
      produces:
      - text/plain
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: Ping API
      tags:
      - ping
  /scores:
    post:
      consumes:
      - application/json
      description: プレイ結果を登録します
      parameters:
      - description: プレイ結果
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.SubmitScoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: スコア登録
      tags:
      - scores
  /songs/playcount:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
      summary: 楽曲プレイ回数ランキング
      tags:
      - charts
  /users:
    post:
      consumes:
      - application/json
      description: 初回起動時に匿名ユーザーを生成し、user_idを返します
      produces:
      - application/json
      responses:
        "200":
          description: '{\"id\":\"UUID\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: ユーザー登録
      tags:
      - users
  /users/{userID}:
    get:
      consumes:
      - application/json
      description: 指定したIDのユーザー情報を取得します（名前のみ）
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{id,name}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: ユーザー情報取得
      tags:
      - users
  /users/{userID}/stats:
    get:
      description: プレイ回数など統計情報を返します
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: ユーザー統計
      tags:
      - users
  /users/update:
    post:
      consumes:
      - application/json
      description: user_idに対してuser_nameを更新します
      parameters:
      - description: 更新内容
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.updateUserNameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{\"status\":\"ok\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: ユーザー名更新
      tags:
      - users
schemes:
- http
- https
swagger: "2.0"
